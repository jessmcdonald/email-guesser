{"version":3,"sources":["components/Form/Form.js","components/Result/Result.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","handleChange","event","a","onChange","setState","submitError","target","name","validateFullname","validateDomain","handleSubmit","preventDefault","state","fullNameError","domainError","onSubmit","fullName","test","domain","includes","className","this","htmlFor","type","id","placeholder","value","role","Component","Result","unsuccessfulResponse","emailAddress","App","addAtIfMissing","charAt","axios","post","FullName","toLowerCase","Domain","then","res","response","data","console","log","status","body","catch","error","message","bind","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0376dcf6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Form.scss';\n\nclass Form extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      fullNameError : '',\n      domainError : '',\n      submitError: ''\n    };\n\n  }\n  handleChange = async (event) => {\n    await this.props.onChange(event);\n    this.setState({submitError: ''});\n\n    switch(event.target.name) {\n      case 'fullName' :\n        this.validateFullname();\n        break;\n      case 'domain' :\n        this.validateDomain();\n        break;\n      default :\n        break;\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if(!this.state.fullNameError && !this.state.domainError) {\n      this.props.onSubmit();\n    } else {\n      this.setState({\n        submitError: 'Please check your entries'\n      })\n    }\n  }\n\n  validateFullname = () => {\n    let regFullName = /^[a-zA-Z]+ [a-zA-Z]+$/;\n    let fullName = this.props.fullName;\n    if(!regFullName.test(fullName)) {\n      this.setState({\n        fullNameError : 'Please enter a full name (first name and last name separated by a space)'\n      })\n    } else {\n      this.setState({\n        fullNameError : ''\n      })\n    }\n  }\n\n  validateDomain = () => {\n    let domain = this.props.domain;\n    if(!domain.includes('.')) {\n      this.setState({\n        domainError : 'Please enter a valid email domain (e.g. @babbel.com)'\n      })\n    } else {\n      this.setState({\n        domainError : ''\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <form className=\"input-form\" onSubmit={this.handleSubmit}>\n\n        <label htmlFor=\"fullName\">Full name:</label>\n        <input type=\"text\" id=\"fullName\" name=\"fullName\" placeholder=\"Jeff Mangum\"\n          value={this.props.fullName}\n          onChange={this.handleChange}>\n        </input>\n        <div className=\"fullname-error\">\n        {this.state.fullNameError ? (\n            <div role=\"alert\">{this.state.fullNameError}</div>\n          ) : ('')}\n        </div>\n\n        <label htmlFor=\"domain\">Domain:</label>\n        <input type=\"text\" id=\"domain\" name=\"domain\" placeholder=\"@babbel.com\"\n          value={this.props.domain}\n          onChange={this.handleChange}>\n        </input>\n        <div className=\"domain-error\">\n        {this.state.domainError ? (\n            <div role=\"alert\">{this.state.domainError}</div>\n          ) : ('')}\n        </div>\n\n        <input type=\"submit\" className=\"submit-button\" value=\"Submit\"></input>\n\n        <div className=\"submit-error\">\n        {this.state.submitError ? (\n            this.state.submitError\n          ) : ('') }\n        </div>\n\n      </form>\n    );\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport './Result.scss';\n\nclass Result extends Component {\n  \n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div className=\"result-container\">\n        {!!this.props.unsuccessfulResponse &&\n          <h2 className=\"result\">\n            {this.props.unsuccessfulResponse}\n          </h2>\n        }\n        {!!this.props.emailAddress && \n            <h2 className=\"result\">\n            I guess their email is: {this.props.emailAddress}\n          </h2>\n        }\n      </div>\n\n    );\n  }\n}\n\nexport default Result;","import React, { Component } from 'react';\nimport './App.scss';\nimport axios from 'axios'\nimport Form from './components/Form/Form';\nimport Result from './components/Result/Result';\n\n// TODO tried nock test in App.test.js\n// axios.defaults.baseURL = 'https://jessss.com';\n\n// axios.interceptors.request.use(request => {\n//   console.log('Starting Request', JSON.stringify(request, null, 2));\n//   return request});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      fullName : '',\n      domain : '',\n      emailAddress : '',\n      unsuccessfulResponse : '',\n    };\n  }\n  \n  onChange = (event) => {\n    this.setState({\n        [event.target.name]: event.target.value\n      });\n  }\n\n  addAtIfMissing = (domain) => {\n    if (domain.charAt(0) === '@') {\n      return domain;\n    } else {\n      return '@' + domain;\n    }\n  }\n\n  onSubmit = () => {\n    axios.post('/api/v1/get-email', {\n      FullName: this.state.fullName.toLowerCase(),\n      Domain: this.addAtIfMissing(this.state.domain.toLowerCase())\n    })\n    .then((res) => {\n      const response = res.data;\n      console.log(res.status);\n      this.setState({\n        fullName : '',\n        domain : '',\n        emailAddress : response.body,\n        unsuccessfulResponse : ''});\n    })\n    .catch(error => {\n      this.setState({ unsuccessfulResponse : \"Please check you have entered a full name and domain\" });\n      console.log(error.message);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Email guessser!</h1>\n          <Form\n            fullName={this.state.fullName}\n            domain={this.state.domain}\n            onChange={this.onChange}\n            onSubmit={this.onSubmit}\n          />\n\n          <div className=\"footer\">\n            <Result\n              emailAddress={this.state.emailAddress}\n              unsuccessfulResponse={this.state.unsuccessfulResponse}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}